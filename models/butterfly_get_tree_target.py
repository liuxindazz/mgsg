import numpy as np
import torch
import torch.nn as nn


trees = [[1, 340, 317, 201],
 [2, 340, 317, 201],
 [3, 340, 317, 202],
 [4, 340, 317, 202],
 [5, 340, 317, 202],
 [6, 340, 317, 203],
 [7, 340, 317, 203],
 [8, 340, 317, 203],
 [9, 340, 317, 204],
 [10, 340, 317, 205],
 [11, 340, 317, 205],
 [12, 340, 317, 206],
 [13, 340, 317, 207],
 [14, 340, 317, 207],
 [15, 340, 317, 208],
 [16, 340, 317, 209],
 [17, 340, 317, 209],
 [18, 340, 317, 209],
 [19, 340, 317, 209],
 [20, 340, 317, 209],
 [21, 340, 317, 209],
 [22, 340, 317, 209],
 [23, 340, 317, 209],
 [24, 340, 317, 209],
 [25, 340, 317, 209],
 [26, 340, 317, 209],
 [27, 340, 317, 209],
 [28, 340, 317, 209],
 [29, 340, 317, 209],
 [30, 340, 317, 209],
 [31, 340, 317, 209],
 [32, 340, 317, 210],
 [33, 340, 317, 211],
 [34, 340, 317, 211],
 [35, 340, 317, 212],
 [36, 340, 317, 212],
 [37, 340, 317, 213],
 [38, 340, 317, 213],
 [39, 340, 317, 213],
 [40, 340, 318, 214],
 [41, 340, 318, 215],
 [42, 340, 318, 216],
 [43, 340, 318, 217],
 [44, 340, 318, 217],
 [45, 340, 318, 217],
 [46, 341, 319, 218],
 [47, 341, 319, 218],
 [48, 341, 319, 218],
 [49, 341, 319, 219],
 [50, 341, 319, 219],
 [51, 341, 319, 219],
 [52, 341, 319, 219],
 [53, 341, 319, 220],
 [54, 341, 319, 220],
 [55, 341, 319, 220],
 [56, 341, 319, 220],
 [57, 341, 319, 220],
 [58, 341, 319, 220],
 [59, 341, 319, 221],
 [60, 341, 319, 222],
 [61, 341, 319, 222],
 [62, 341, 320, 223],
 [63, 341, 320, 224],
 [64, 341, 320, 224],
 [65, 341, 320, 224],
 [66, 341, 320, 224],
 [67, 341, 320, 225],
 [68, 341, 320, 226],
 [69, 341, 320, 226],
 [70, 341, 320, 226],
 [71, 341, 320, 226],
 [72, 341, 321, 227],
 [73, 341, 321, 227],
 [74, 341, 321, 227],
 [75, 342, 322, 228],
 [76, 342, 322, 228],
 [77, 342, 322, 228],
 [78, 342, 322, 229],
 [79, 342, 322, 229],
 [80, 342, 322, 229],
 [81, 342, 322, 229],
 [82, 342, 322, 230],
 [83, 342, 322, 231],
 [84, 342, 322, 231],
 [85, 342, 322, 232],
 [86, 342, 322, 232],
 [87, 342, 322, 232],
 [88, 342, 322, 233],
 [89, 342, 322, 233],
 [90, 342, 323, 234],
 [91, 342, 323, 235],
 [92, 342, 323, 235],
 [93, 342, 323, 235],
 [94, 342, 323, 236],
 [95, 342, 323, 237],
 [96, 342, 323, 237],
 [97, 342, 323, 238],
 [98, 342, 323, 238],
 [99, 342, 323, 238],
 [100, 342, 323, 239],
 [101, 342, 323, 240],
 [102, 342, 323, 240],
 [103, 342, 323, 241],
 [104, 342, 323, 241],
 [105, 342, 323, 242],
 [106, 342, 323, 243],
 [107, 342, 323, 244],
 [108, 342, 324, 245],
 [109, 342, 324, 245],
 [110, 342, 324, 246],
 [111, 342, 324, 247],
 [112, 342, 324, 248],
 [113, 342, 324, 249],
 [114, 342, 324, 250],
 [115, 342, 324, 251],
 [116, 342, 325, 252],
 [117, 342, 325, 252],
 [118, 342, 326, 253],
 [119, 342, 326, 254],
 [120, 342, 326, 254],
 [121, 342, 326, 255],
 [122, 342, 326, 256],
 [123, 342, 326, 256],
 [124, 342, 327, 257],
 [125, 342, 327, 258],
 [126, 342, 328, 259],
 [127, 342, 329, 260],
 [128, 342, 329, 260],
 [129, 342, 329, 260],
 [130, 342, 329, 260],
 [131, 342, 329, 261],
 [132, 342, 329, 261],
 [133, 342, 329, 262],
 [134, 342, 329, 263],
 [135, 342, 329, 264],
 [136, 342, 329, 265],
 [137, 342, 329, 265],
 [138, 342, 330, 266],
 [139, 342, 330, 267],
 [140, 342, 330, 267],
 [141, 342, 330, 267],
 [142, 342, 331, 268],
 [143, 342, 331, 269],
 [144, 342, 331, 270],
 [145, 342, 331, 270],
 [146, 342, 331, 270],
 [147, 342, 331, 270],
 [148, 342, 331, 270],
 [149, 342, 331, 271],
 [150, 342, 331, 272],
 [151, 342, 331, 273],
 [152, 342, 331, 274],
 [153, 342, 331, 275],
 [154, 342, 331, 275],
 [155, 342, 332, 276],
 [156, 342, 332, 276],
 [157, 343, 333, 277],
 [158, 343, 333, 278],
 [159, 343, 333, 279],
 [160, 343, 334, 280],
 [161, 343, 334, 281],
 [162, 343, 334, 282],
 [163, 343, 335, 283],
 [164, 343, 336, 284],
 [165, 343, 336, 285],
 [166, 343, 336, 285],
 [167, 343, 336, 286],
 [168, 343, 336, 287],
 [169, 343, 336, 287],
 [170, 343, 336, 288],
 [171, 343, 336, 289],
 [172, 343, 336, 290],
 [173, 343, 336, 291],
 [174, 343, 336, 292],
 [175, 343, 336, 293],
 [176, 343, 336, 294],
 [177, 343, 336, 295],
 [178, 343, 336, 296],
 [179, 343, 336, 297],
 [180, 344, 337, 298],
 [181, 344, 337, 299],
 [182, 344, 337, 300],
 [183, 344, 337, 301],
 [184, 344, 337, 302],
 [185, 344, 337, 303],
 [186, 344, 337, 304],
 [187, 344, 337, 305],
 [188, 344, 337, 306],
 [189, 344, 338, 307],
 [190, 344, 338, 308],
 [191, 344, 338, 309],
 [192, 344, 338, 310],
 [193, 344, 338, 311],
 [194, 344, 338, 312],
 [195, 344, 338, 313],
 [196, 344, 339, 314],
 [197, 344, 339, 315],
 [198, 344, 339, 316],
 [199, 344, 339, 316],
 [200, 344, 339, 316]]


# addnum = np.asarray([0, 200, 316, 339])

# t = np.asarray(trees)+addnum


# print(t.tolist())

def get_label_list(targets):

    label_list = []
    # print(targets)
    for i in range(targets.size(0)):
        if trees[targets[i]][0] is not -1:
            # print(trees[targets[i]])
            # print('*****',targets[7])
            # print('-----',trees[targets[7]])
            # print(i, trees[targets[i]])
            last = trees[targets[i]].pop(0)
            trees[targets[i]].append(last)
            # print(trees[targets[i]])
            trees[targets[i]].insert(0, -1)
            trees[targets[i]].append(0)
            # print(trees[targets[i]])
            label_list.append([k+1 for k in trees[targets[i]]])
        else:
            label_list.append([k+1 for k in trees[targets[i]]])

    # print(label_list)
    dec_list = [d[:-1] for d in label_list]
    t_list = [t[1:] for t in label_list]

    # print(dec_list)
    dec_list = torch.from_numpy(np.array(dec_list)).cuda()
    t_list = torch.from_numpy(np.array(t_list)).cuda()
    return dec_list, t_list

if __name__ == '__main__':
    targets = torch.tensor([ 22,  15, 176, 134, 131, 185,  54, 116], device='cuda:0')
    k,t = get_label_list(targets)
    print(k)
    print(t)


# P = np.asarray(trees)

# P[:, [1, 3]] = P[:, [3, 1]]
# # P[:, [1, 2]] = P[:, [2, 1]]
# print(P.tolist())